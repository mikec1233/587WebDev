This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-03T22:22:43.102Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
controllers/
  errorController.js
  homeController.js
public/
  css/
    styles.css
views/
  contact.ejs
  duplicateId.ejs
  idNotFound.ejs
  index.ejs
  layout.ejs
  remove.ejs
  users.ejs
main.js
package.json

================================================================
Repository Files
================================================================

================
File: controllers/errorController.js
================
'use strict';

const httpStatus = require( 'http-status-codes' );

exports.pageNotFoundError = ( req, res ) => {
  let errorCode = httpStatus.NOT_FOUND;
  res.status( errorCode );
  res.render( 'error' );
};

exports.internalServerError = ( error, req, res, next ) => {
  let errorCode = httpStatus.INTERNAL_SERVER_ERROR;
  console.log( `ERROR occurred: ${error.stack}` );
  res.status( errorCode );
  res.send( `${errorCode} | Sorry, our application is taking a nap!` );
};

================
File: controllers/homeController.js
================
// homecController
const express = require('express');
const router = express.Router();

/* GET home page. */
router.get('/', function (req, res, next) {
  res.render('index');
});


var users = [
  {
    name: "John Wayne",
    gender: "male",
    id: "0"
  },
  {
    name: "Mary Monro",
    gender: "female",
    id: "1"

  },
  {
    name: "Charles Bronson",
    gender: "male",
    id: "2"

  }
];


router.showUsers = (req, res) => {
  res.render("users", {
    allUsers: users});
};

router.addUsers = (req, res) => {
  var newuserName = req.body.name;
  var newuserGender = req.body.gender;
  var newuserId = req.body.id;
  var allUsers = users;
  
  console.log("Adding User " + newuserName + " ...")
  var userExists = allUsers.some(user => user.id === newuserId);
  if (userExists) {
    console.log("Duplicate user id detected. Failed to add user.");
    res.render("duplicateId")
} else {
    allUsers.push({ name: newuserName, gender: newuserGender, id: newuserId });
    res.render("users", { allUsers: users, title: "Users List" });
    console.log("Added User: " + newuserName);
}
};


router.postSignUpForm = (req, res) => {
  res.render("contact", { title: "Contact Us" });
};

router.postDeleteForm = (req, res) => {
  res.render("remove", { title: "Remove User"})
}

router.deleteUser = (req, res) => {
  var inputId = req.body.id;
  console.log("Attempting to remove user with Input Id: " + inputId);
  var allUsers = users;
  let userRemoved = false;

  allUsers.some((user, index) => {
    if(user.id === inputId){
      allUsers.splice(index, 1);
      userRemoved = true;
      return true;
    }
  });
  if (userRemoved){
    console.log("Removed User")
    res.render("users", {
      allUsers: users});
  }else{
    console.log("No User Found");
    res.render("idNotFound", {
      id: inputId
    });
  }
};
module.exports = router;

================
File: public/css/styles.css
================
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 0;
    background-color: #f5f5f5;
    color: #333;
  }
  
  h1, h5 {
    color: #2c3e50;
  }

  /* p{
    tab-size: 4;
  } */

  
  .container {
    margin: 20px auto;
    max-width: 800px;
    background: #ffffff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    text-align: center;
  }
  
  input[type="text"], input[type="submit"] {
    margin: 10px 0;
    padding: 10px;
    font-size: 16px;
  }
  
  input[type="submit"] {
    background-color: #2980b9;
    color: #ffffff;
    border: none;
    cursor: pointer;
    border-radius: 4px;
  }
  
  input[type="submit"]:hover {
    background-color: #1c5980;
  }
  
  a {
    color: #3498db;
    text-decoration: none;
  }
  
  a:hover {
    text-decoration: underline;
  }
  
  button {
    font-size: 16px;
    padding: 10px;
    background: #e74c3c;
    color: #fff;
    border: none;
    border-radius: 5px;
    cursor: pointer;
  }
  
  button:hover {
    background: #c0392b;
  }
  
  .date {
    font-size: 14px;
    color: #666;
    margin-right: 20px;
  } 

  .indented {
    margin-left: 20px; /* Adjust this value to control indentation */
  }
  /* Footer */
#footer {
    text-align: center;
    padding: 10px;
    background-color: #2c3e50;
    color: #ffffff;
    position: relative;
    bottom: 0;
    width: 100%;
  }

================
File: views/contact.ejs
================
<P>Please Enter Name, Gender, and User Id</P>
<form action="/users/submit" method="post">
  <label for="name">Name</label>
  <input type="text" name="name">
  <label for="gender">Gender</label>
  <input type="text" name="gender">
  <label for="id">Id</label>
  <input type="text" name="id">
  <input type="submit" value="Submit">
</form>

================
File: views/duplicateId.ejs
================
<div class="container">
  <div class="col-6">
  </div>
  <div class="col-6">
    <h1>Error: A user with this ID already exists. Head to <a href="/users">Users</a></h1>
  </div>
</div>

================
File: views/idNotFound.ejs
================
<div class="container">
    <div class="col-6">
    </div>
    <div class="col-6">
      <h1>Error: No user exists for ID: <%= id %>. Head to <a href="/users">Users</a></h1>
    </div>
  </div>

================
File: views/index.ejs
================
<div class="container">
  <div class="col-6">
  </div>
  <div class="col-6">
    <h1>Welcome Dr. Ngo!</h1>
  </div>
</div>

================
File: views/layout.ejs
================
<!DOCTYPE html>
<html>

<head>
	<meta charset="utf-8">
	<link rel="stylesheet" href="/css/styles.css">
	<title>Project 1</title>
</head>

<body>
	<div id="nav">
		<div class="col-6 center">
			<span>Top Navigation: </span>
			<a href="/"><span class="button">Home</span></a>
			<a href="/users"><span class="button">Users</span></a>
			<a href="/contact"><span class="button">Contact</span></a>
			<a href="/remove"><span class="button">Remove</span></a>	
		</div>
	</div>
	<div id="bottom-nav">
		<p>Bottom Navigation: (Nothing)</p>
	  </div>

	<%- body %>


	<footer id="footer">
		<p>&copy; <%= new Date() %> </p>
	  </footer>
</body>

</html>

================
File: views/remove.ejs
================
<P>Please Enter User Id to Remove.</P>
<form action="/users/remove" method="POST">
  <input type="hidden" name="_method" value="DELETE">
  <label for="id">Id</label>
  <input type="text" name="id">
  <input type="submit" value="Submit">
</form>

================
File: views/users.ejs
================
<div class="container">
  <div class="col-6">
  </div>
  <div class="col-6">
    <h1 class="title">Our Users</h1>
    <% allUsers.forEach(Users => { %>
      <h3>User Name: <%= Users.name %> </h3>
      <p class="indented">User Gender: <%= Users.gender %> </p>
      <p class="indented">User Id: <%= Users.id %> </p>
      <%}); %>
  </div>
</div>

================
File: main.js
================
'use strict';
// main.js
const express = require('express');
const layouts = require('express-ejs-layouts');
const mongoose = require('mongoose');

const app = express();
const homeController = require('./controllers/homeController');
const errorController = require('./controllers/errorController');
const path = require('path');
const methodOverride = require('method-override');

app.use(methodOverride('_method'));
app.use(express.urlencoded({extended: false}))
app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));


app.set('views', path.join(__dirname, 'views'));
app.set('port', process.env.PORT || 3000);
app.set('view engine', 'ejs');
app.use(layouts);


//render home page
app.get('/', homeController);

//display/add users
app.get('/users', homeController.showUsers);
app.get('/contact', homeController.postSignUpForm);
app.post('/users/submit', homeController.addUsers);

//remove users
app.get('/remove', homeController.postDeleteForm);
app.post('/users/remove', homeController.deleteUser);

app.listen(app.get('port'), () => {
  console.log(`Server running on port: ${app.get('port')}`);
});

================
File: package.json
================
{
  "name": "confetti_cuisine",
  "version": "1.0.0",
  "description": "An Express.js app with routes",
  "main": "main.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "node main.js",
    "dev": "nodemon main.js"
  },
  "author": "Jon Wexler",
  "license": "ISC",
  "dependencies": {
    "body-parser": "^1.19.0",
    "ejs": "^3.1.10",
    "express": "^4.17.1",
    "express-ejs-layouts": "^2.5.1",
    "http-status-codes": "^1.4.0",
    "method-override": "^3.0.0",
    "mongoose": "^8.9.3",
    "nodemon": "^3.1.9"
  }
}
